#!/usr/bin/env just --justfile

set dotenv-load
set positional-arguments 

@_default:
  just --justfile {{justfile()}} --list --list-heading '' --list-prefix 'dotenv '

# Create .env .env.example and add .env to gitignore
create:
  #!/bin/bash

  if [ -z $PRJ_ROOT ]; then

    BLUE='\033[0;34m'
    NC='\033[0m' # No Color

    GIT_ROOT=$(git rev-parse --show-toplevel)
    PACKAGE_ROOT=$(npm prefix)
    # [ -f "${GIT_ROOT}/package.json" ] && PACKAGE_ROOT=$PWD

    if [ $GIT_ROOT == $PACKAGE_ROOT ]; then
      PRJ_ROOT=$GIT_ROOT
    else
      echo -e "${BLUE}Define Path of your project root ${NC}"
      echo -e "${BLUE}1. ${GIT_ROOT} ${NC}"
      echo -e "${BLUE}2. ${PACKAGE_ROOT} ${NC}"
      read -p "Type 1, 2 or write full path customly: " choice
      case $choice in
        1)
          PRJ_ROOT=$GIT_ROOT
          echo "git root ${PRJ_ROOT}/.env"
          ;;
        2)
          PRJ_ROOT=$PACKAGE_ROOT
          echo "package root ${PRJ_ROOT}/.env"
          ;;
        *)
          if [ -d $choice ]; then
            PRJ_ROOT=$choice
            echo "Your chosen Root: ${PRJ_ROOT}/.env"
          else
            echo "Written ROOT Absolute PATH not exists. $choice"
            exit 1
          fi
          ;;
      esac
    fi
    echo -e "${BLUE} PRJ_ROOT set to ${PRJ_ROOT} ${NC}"
    
    if [ ! -f "${PRJ_ROOT}/.env" ]; then
      touch "${PRJ_ROOT}/.env" && chmod 600 "${PRJ_ROOT}/.env"
      just --justfile {{justfile_directory()}}/dotenv update PRJ_ROOT $PRJ_ROOT project .env
      just --justfile {{justfile_directory()}}/dotenv load_with_direnv
    fi

  else echo "Project root contains in .env and set to: ${PRJ_ROOT}"
  fi
  # TODO: add copying env var keys without values to .env.example list or do it on git secrets sync. 
  # [ ! -f "${PRJ_ROOT}/.env.example" ] && touch "${PRJ_ROOT}/.env.example"
  just --justfile {{justfile_directory()}}/justfile create_file .gitignore $PRJ_ROOT
  # [ ! -f "${PRJ_ROOT}/.gitignore" ] && touch "${PRJ_ROOT}/.gitignore"  && chmod 600 "${PRJ_ROOT}/.gitignore"
  if ! grep -q ".env" "${PRJ_ROOT}/.gitignore"; then
    echo -e ".env" >> "${PRJ_ROOT}/.gitignore"
    echo -e "!.env.example" >> "${PRJ_ROOT}/.gitignore"
  fi

# Update .env variable | Usage: update_env key value group(optional) file(optional)
update *args='':
  #!/usr/bin/bash
  # [ ! -z $PRJ_ROOT ] && just --justfile {{justfile_directory()}}/dotenv create
  [ ! -f "${PRJ_ROOT}/.env" ] && just --justfile {{justfile_directory()}}/dotenv create
  key="$1"
  value="\"$2\""
  group="${3:-else}"
  default_env_file="${PRJ_ROOT}/.env"
  file="${4:-$default_env_file}"

  if grep -q "^$key=" "$file"; then
      sed -i "s/^$key=.*/$key=$value/" "$file"
  elif grep -q "^# $group" "$file"; then
      sed -i "/^# $group/a\\
  $key=$value" "$file"
  else
      echo -e "\n# $group\n$key=$value" >> "$file"
  fi
  just --justfile {{justfile_directory()}}/dotenv load_with_direnv

# Load dotenv with direnv
load_with_direnv:
  #!/usr/bin/bash
  if [ ! -f "${PRJ_ROOT}/.envrc" ]; then
    echo "[ -f "${PRJ_ROOT}/.env" ] && dotenv" >> "${PRJ_ROOT}/.envrc"
  fi
  direnv allow

# Create dotenv-vault and login to dotenv server
vault_init:
  npx dotenv-vault@latest new
  npx dotenv-vault@latest login

# push env to dotenv server
vault_push:
  npx dotenv-vault@latest push

# pull env from dotenv server
vault_pull:
  npx dotenv-vault@latest pull

# Encrypt dotenv with gpg key ( .env file and git gpg uses as default)
encrypt:
  #!/bin/bash
  default_file="${PRJ_ROOT}/.env"
  FILE="${1:-$default_file}"
  GITKEY=$(git config --get user.signingkey)
  KEY="${2:-$GITKEY}"

  if [[ -z "$KEY" ]]; then
      echo "No GPG key. Set correct custom GPG key or set Git GPG 'git config --global user.signingkey YOURKEYID'."
      exit 1
  fi
  gpg --encrypt --recipient "$KEY" "$FILE"

# Decrypt dotenv with gpg key 
decrypt:
  #!/bin/bash
  default_file="${PRJ_ROOT}/.env.gpg"
  FILE="${1:-$default_file}"
  GITKEY=$(git config --get user.signingkey)
  KEY="${2:-$GITKEY}"

  if [[ -z "$KEY" ]]; then
    echo "No GPG key. Set correct custom GPG key or set Git GPG 'git config --global user.signingkey YOURKEYID'."
    exit 1
  fi
  gpg --decrypt --output "${PRJ_ROOT}/.env" "$FILE"

# Push env vars to github repo secrets
_sync_to_gh_secrets:
  #!/bin/bash
  direnv allow
  echo $REPO

  while IFS= read -r line
  do
    if [[ "$line" != *"="* ]]; then
      continue
    fi
    IFS='=' read -ra PARTS <<< "$line"
    echo ${PARTS[1]} | gh secret set ${PARTS[0]} --repo=$REPO --body=-
  done < "${PRJ_ROOT}/.env"

# Remove env vars to github repo secrets
_rm_from_gh_secrets:
  #!/bin/bash
  direnv allow
  echo $REPO

  while IFS= read -r line
  do
    if [[ "$line" != *"="* ]]; then
      continue
    fi
    IFS='=' read -ra PARTS <<< "$line"
    echo ${PARTS[1]} | gh secret delete ${PARTS[0]} --repo=$REPO
  done < "${PRJ_ROOT}/.env"

# dotenv.example
create_example:
  #!/bin/bash

  input="${PRJ_ROOT}/.env"
  output="${PRJ_ROOT}/.env.example"
  placeholder="YOUR_VALUE_HERE"

  [ ! -f "$input" ] && echo "File $input does not exist." && exit 1

  # Create or clear the output file
  > $output

  while IFS= read -r line; do
    # Check if the line contains an equals sign
    if [[ $line == *"="* ]]; then
      # Split the line into name and value
      name="${line%%=*}"
      # Write the name and placeholder to the output file
      echo "$name=$placeholder" >> $output
    else
      # Write the line to the output file as is
      echo "$line" >> $output
    fi
  done < "$input"
  echo "File $output has been created."
